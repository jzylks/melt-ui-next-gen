{
  "utils": {
    "constructorProps": [],
    "methods": [],
    "properties": []
  },
  "Tree": {
    "constructorProps": [
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, the user can select multiple items.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "selected",
        "type": "MaybeMultiple<Multiple> | undefined",
        "description": "The currently selected item(s).\r\nIf `multiple` is `true`, this should be an `Iterable`.\r\nOtherwise, it'll be a `string`.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onSelectedChange",
        "type": "| ((value: Multiple extends true ? Set<string> : string | undefined) => void)\n  | undefined",
        "description": "Callback fired when selection changes",
        "optional": true
      },
      {
        "name": "expanded",
        "type": "MaybeGetter<Iterable<string> | undefined>",
        "description": "The currently expanded items",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onExpandedChange",
        "type": "((value: Set<string>) => void) | undefined",
        "description": "Callback fired when expanded state changes",
        "optional": true
      },
      {
        "name": "expandOnClick",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, groups (items with children) expand on click.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "items",
        "type": "I",
        "description": "The items contained in the tree.",
        "optional": false
      },
      {
        "name": "typeaheadTimeout",
        "type": "MaybeGetter<number> | undefined",
        "description": "How many time (in ms) the typeahead string is held before it is cleared",
        "defaultValue": "500",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "isSelected",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently selected\r@param id - ID of the item to check"
      },
      {
        "name": "isExpanded",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently expanded\r@param id - ID of the item to check"
      },
      {
        "name": "expand",
        "type": "(id: string) => void",
        "description": "Expands a specific item\r@param id - ID of the item to expand"
      },
      {
        "name": "collapse",
        "type": "(id: string) => void",
        "description": "Collapses a specific item\r@param id - ID of the item to collapse"
      },
      {
        "name": "toggleExpand",
        "type": "(id: string) => void",
        "description": "Toggles the expanded state of an item\r@param id - ID of the item to toggle"
      },
      {
        "name": "select",
        "type": "(id: string) => void",
        "description": "Selects a specific item\r@param id - ID of the item to select"
      },
      {
        "name": "deselect",
        "type": "(id: string) => void",
        "description": "Deselects a specific item\r@param id - ID of the item to deselect"
      },
      {
        "name": "clearSelection",
        "type": "() => void",
        "description": "Clears all current selections"
      },
      {
        "name": "toggleSelect",
        "type": "(id: string) => void",
        "description": "Toggles the selected state of an item\r@param id - ID of the item to toggle"
      },
      {
        "name": "selectAll",
        "type": "() => void",
        "description": "Selects all visible items.\rIf all items are already selected, clears the selection."
      },
      {
        "name": "getItemId",
        "type": "(id: string) => string",
        "description": "Gets the DOM ID for a specific tree item\r@param id - ID of the item"
      },
      {
        "name": "getItemEl",
        "type": "(id: string) => HTMLElement | null",
        "description": "Gets the DOM element for a specific tree item\r@param id - ID of the item"
      },
      {
        "name": "selectUntil",
        "type": "(id: string) => void",
        "description": "Selects all items between the last selected item and the specified item\r@param id - ID of the item to select until"
      },
      {
        "name": "typeahead",
        "type": "(letter: string) => void",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "items",
        "type": "Extracted<I>",
        "description": "The items contained in the tree"
      },
      {
        "name": "multiple",
        "type": "Multiple",
        "description": "If `true`, the user can select multiple items holding `Control`/`Meta` or `Shift`"
      },
      {
        "name": "expandOnClick",
        "type": "boolean",
        "description": "If `true`, groups (items with children) expand on click"
      },
      {
        "name": "typeaheadTimeout",
        "type": "number",
        "description": ""
      },
      {
        "name": "selected",
        "type": "Value<FalseIfUndefined<Multiple>>",
        "description": "Currently selected item(s)\rFor multiple selection, returns a Set of IDs\rFor single selection, returns a single ID or undefined"
      },
      {
        "name": "expanded",
        "type": "SvelteSet<string>",
        "description": "Set of currently expanded item IDs"
      },
      {
        "name": "root",
        "type": "{ role: string; \"data-melt-tree-root\": string }",
        "description": "Gets ARIA attributes for the root tree element"
      },
      {
        "name": "group",
        "type": "{ role: string; \"data-melt-tree-group\": string }",
        "description": "ARIA attributes for group elements"
      },
      {
        "name": "children",
        "type": "Child<I>[]",
        "description": "Array of Child instances representing the top-level items"
      }
    ],
    "propsAlt": "export type TreeProps<Items extends TreeItem[], Multiple extends boolean = false> = {\r\n  /**\r\n   * If `true`, the user can select multiple items.\r\n   * @default false\r\n   */\r\n  multiple?: MaybeGetter<Multiple | undefined>;\r\n  /**\r\n   * The currently selected item(s).\r\n   * If `multiple` is `true`, this should be an `Iterable`.\r\n   * Otherwise, it'll be a `string`.\r\n   * @default undefined\r\n   */\r\n  selected?: MaybeMultiple<Multiple>;\r\n  /**\r\n   * Callback fired when selection changes\r\n   * @param value - For multiple selection, a Set of selected IDs. For single selection, a single ID or undefined\r\n   */\r\n  onSelectedChange?: (value: Multiple extends true ? Set<string> : string | undefined) => void;\r\n  /**\r\n   * The currently expanded items\r\n   *\r\n   * @default undefined\r\n   */\r\n  expanded?: MaybeMultiple<true>;\r\n  /**\r\n   * Callback fired when expanded state changes\r\n   * @param value - Set of expanded item IDs\r\n   */\r\n  onExpandedChange?: (value: Set<string>) => void;\r\n  /**\r\n   * If `true`, groups (items with children) expand on click.\r\n   * @default true\r\n   */\r\n  expandOnClick?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * The items contained in the tree.\r\n   * @required\r\n   */\r\n  items: Items;\r\n  /**\r\n   * How many time (in ms) the typeahead string is held before it is cleared\r\n   * @default 500\r\n   */\r\n  typeaheadTimeout?: MaybeGetter<number>;\r\n};"
  },
  "Toggle": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<boolean> | undefined",
        "description": "The value for the Toggle.\r\n\r\nWhen passing a getter, it will be used as source of truth,\r\nmeaning that the value only changes when the getter returns a new value.\r\n\r\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the input.",
        "defaultValue": "false",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly \"data-melt-toggle-trigger\": \"\"\n  readonly \"data-checked\": \"\" | undefined\n  readonly \"aria-pressed\": boolean\n  readonly disabled: true | undefined\n  readonly onclick: () => void\n}",
        "description": "The trigger that toggles the value."
      },
      {
        "name": "hiddenInput",
        "type": "{\n  readonly \"data-melt-toggle-hidden-input\": \"\"\n  readonly type: \"hidden\"\n  readonly value: \"on\" | \"off\"\n}",
        "description": "A hidden input field to use within forms."
      }
    ],
    "propsAlt": "export type ToggleProps = {\r\n  /**\r\n   * The value for the Toggle.\r\n   *\r\n   * When passing a getter, it will be used as source of truth,\r\n   * meaning that the value only changes when the getter returns a new value.\r\n   *\r\n   * Otherwise, if passing a static value, it'll serve as the default value.\r\n   *\r\n   *\r\n   * @default false\r\n   */\r\n  value?: MaybeGetter<boolean>;\r\n  /**\r\n   * Called when the value is supposed to change.\r\n   */\r\n  onValueChange?: (value: boolean) => void;\r\n\r\n  /**\r\n   * If `true`, prevents the user from interacting with the input.\r\n   *\r\n   * @default false\r\n   */\r\n  disabled?: MaybeGetter<boolean | undefined>;\r\n};"
  },
  "Tabs": {
    "constructorProps": [
      {
        "name": "selectWhenFocused",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, the value will be changed whenever a trigger is focused.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "loop",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the the trigger selection should loop when navigating with the arrow keys.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the tabs.",
        "defaultValue": "\"horizontal\"",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<T | undefined>",
        "description": "The default value for `tabs.value`\r\n\r\nWhen passing a getter, it will be used as source of truth,\r\nmeaning that `tabs.value` only changes when the getter returns a new value.\r\n\r\nIf omitted, it will use the first tab as default.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((active: T) => void) | undefined",
        "description": "Called when the `Tabs` instance tries to change the active tab.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getTrigger",
        "type": "(value: T) => {\n  readonly \"data-melt-tabs-trigger\": T\n  readonly \"data-active\": \"\" | undefined\n  readonly tabindex: 0 | -1\n  readonly role: \"tab\"\n  readonly \"aria-selected\": boolean\n  readonly \"aria-controls\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly onclick: () => T\n  readonly onkeydown: (e: KeyboardEvent) => void\n  readonly id: string\n}",
        "description": "Gets the attributes and listeners for a tab trigger. Requires an identifying tab value."
      },
      {
        "name": "getContent",
        "type": "(value: T) => {\n  readonly \"data-melt-tabs-content\": \"\"\n  readonly hidden: boolean\n  readonly \"data-active\": \"\" | undefined\n  readonly role: \"tabpanel\"\n  readonly id: string\n  readonly \"aria-labelledby\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n}",
        "description": "Gets the attributes and listeners for the tabs contents. Requires an identifying tab value."
      }
    ],
    "properties": [
      {
        "name": "selectWhenFocused",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "value",
        "type": "T",
        "description": "The current selected tab."
      },
      {
        "name": "triggerList",
        "type": "{\n  readonly \"data-melt-tabs-trigger-list\": \"\"\n  readonly role: \"tablist\"\n  readonly \"aria-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n}",
        "description": "The attributes for the list that contains the tab triggers."
      }
    ],
    "propsAlt": "export type TabsProps<T extends string = string> = {\r\n  /**\r\n   * If `true`, the value will be changed whenever a trigger is focused.\r\n   *\r\n   * @default true\r\n   */\r\n  selectWhenFocused?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * If the the trigger selection should loop when navigating with the arrow keys.\r\n   *\r\n   * @default true\r\n   */\r\n  loop?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * The orientation of the tabs.\r\n   *\r\n   * @default \"horizontal\"\r\n   */\r\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\r\n  /**\r\n   * The default value for `tabs.value`\r\n   *\r\n   * When passing a getter, it will be used as source of truth,\r\n   * meaning that `tabs.value` only changes when the getter returns a new value.\r\n   *\r\n   * If omitted, it will use the first tab as default.\r\n   *\r\n   * @default undefined\r\n   */\r\n  value?: MaybeGetter<T | undefined>;\r\n  /**\r\n   * Called when the `Tabs` instance tries to change the active tab.\r\n   */\r\n  onValueChange?: (active: T) => void;\r\n};"
  },
  "Slider": {
    "constructorProps": [
      {
        "name": "min",
        "type": "MaybeGetter<number | undefined>",
        "description": "The minimum value of the slider.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "max",
        "type": "MaybeGetter<number | undefined>",
        "description": "The maximum value of the slider.",
        "defaultValue": "100",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the slider.",
        "defaultValue": "\"horizontal\"",
        "optional": true
      },
      {
        "name": "step",
        "type": "MaybeGetter<number | undefined>",
        "description": "The step size of the slider.",
        "defaultValue": "1",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<number | undefined>",
        "description": "The default value for `tabs.value`\r\n\r\nWhen passing a getter, it will be used as source of truth,\r\nmeaning that `tabs.value` only changes when the getter returns a new value.\r\n\r\nIf omitted, it will use the first tab as default.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((active: number) => void) | undefined",
        "description": "Called when the `Slider` instance tries to change the active tab.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "min",
        "type": "number",
        "description": ""
      },
      {
        "name": "max",
        "type": "number",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "step",
        "type": "number",
        "description": ""
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value of the slider."
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-dragging\": \"\" | undefined\n  readonly \"data-value\": number\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"aria-valuenow\": number\n  readonly \"aria-valuemin\": number\n  readonly \"aria-valuemax\": number\n  readonly \"aria-orientation\": \"horizontal\" | \"vertical\"\n  readonly style: `--percentage: ${string}; --percentage-inv: ${string}; touch-action: ${string}`\n  readonly tabindex: 0\n  readonly role: \"slider\"\n  readonly \"data-melt-slider-root\": \"\"\n  readonly id: string\n  readonly onpointerdown: (e: PointerEvent) => void\n  readonly onkeydown: (e: KeyboardEvent) => void\n}",
        "description": "The root of the slider.\rAny cursor interaction along this element will change the slider's values."
      },
      {
        "name": "thumb",
        "type": "{\n  readonly \"data-dragging\": \"\" | undefined\n  readonly \"data-value\": number\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-melt-slider-thumb\": \"\"\n  readonly tabindex: 0\n}",
        "description": "The slider's thumb, positioned at the end of the range."
      }
    ],
    "propsAlt": "export type SliderProps = {\r\n  /**\r\n   * The minimum value of the slider.\r\n   *\r\n   * @default 0\r\n   */\r\n  min?: MaybeGetter<number | undefined>;\r\n  /**\r\n   * The maximum value of the slider.\r\n   *\r\n   * @default 100\r\n   */\r\n  max?: MaybeGetter<number | undefined>;\r\n  /**\r\n   * The orientation of the slider.\r\n   *\r\n   * @default \"horizontal\"\r\n   */\r\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\r\n\r\n  /**\r\n   * The step size of the slider.\r\n   *\r\n   * @default 1\r\n   */\r\n  step?: MaybeGetter<number | undefined>;\r\n  /**\r\n   * The default value for `tabs.value`\r\n   *\r\n   * When passing a getter, it will be used as source of truth,\r\n   * meaning that `tabs.value` only changes when the getter returns a new value.\r\n   *\r\n   * If omitted, it will use the first tab as default.\r\n   *\r\n   * @default undefined\r\n   */\r\n  value?: MaybeGetter<number | undefined>;\r\n  /**\r\n   * Called when the `Slider` instance tries to change the active tab.\r\n   */\r\n  onValueChange?: (active: number) => void;\r\n};"
  },
  "Select": {
    "constructorProps": [],
    "methods": [],
    "properties": []
  },
  "RadioGroup": {
    "constructorProps": [
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the group.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "required",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, indicates that the user must select a radio button before\r\nthe owning form can be submitted.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "loop",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the the button selection should loop when navigating with the arrow keys.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "selectWhenFocused",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, the value will be changed whenever a button is focused.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the slider.",
        "defaultValue": "\"vertical\"",
        "optional": true
      },
      {
        "name": "name",
        "type": "MaybeGetter<string | undefined>",
        "description": "Input name for radio group.",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<string | undefined>",
        "description": "Default value for radio group.",
        "defaultValue": "\"\"",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((active: string) => void) | undefined",
        "description": "Called when the radio button is clicked.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getItem",
        "type": "(item: string) => RadioItem",
        "description": ""
      },
      {
        "name": "select",
        "type": "(item: string) => void",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "selectWhenFocused",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-melt-radio-group-root\": \"\"\n  readonly id: string\n  readonly role: \"radiogroup\"\n  readonly \"aria-required\": boolean\n  readonly \"aria-labelledby\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-disabled\": true | undefined\n  readonly \"data-value\": string\n}",
        "description": ""
      },
      {
        "name": "label",
        "type": "{\n  readonly \"data-melt-radio-group-label\": \"\"\n  readonly id: string\n  readonly for: string\n  readonly onclick: (\n    e: MouseEvent & { currentTarget: EventTarget & HTMLLabelElement },\n  ) => void\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-disabled\": true | undefined\n  readonly \"data-value\": string\n}",
        "description": ""
      },
      {
        "name": "hiddenInput",
        "type": "{\n  readonly \"data-melt-radio-group-hidden-input\": \"\"\n  readonly disabled: boolean\n  readonly required: boolean\n  readonly hidden: true\n  readonly \"aria-hidden\": true\n  readonly tabindex: -1\n  readonly value: string\n  readonly name: string | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type RadioGroupProps = {\r\n  /**\r\n   * If `true`, prevents the user from interacting with the group.\r\n   *\r\n   * @default false\r\n   */\r\n  disabled?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * If `true`, indicates that the user must select a radio button before\r\n   * the owning form can be submitted.\r\n   *\r\n   * @default false\r\n   */\r\n  required?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * If the the button selection should loop when navigating with the arrow keys.\r\n   *\r\n   * @default true\r\n   */\r\n  loop?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * If `true`, the value will be changed whenever a button is focused.\r\n   *\r\n   * @default true\r\n   */\r\n  selectWhenFocused?: MaybeGetter<boolean | undefined>;\r\n  /**\r\n   * The orientation of the slider.\r\n   *\r\n   * @default \"vertical\"\r\n   */\r\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\r\n  /**\r\n   * Input name for radio group.\r\n   */\r\n  name?: MaybeGetter<string | undefined>;\r\n  /**\r\n   * Default value for radio group.\r\n   *\r\n   * @default \"\"\r\n   */\r\n  value?: MaybeGetter<string | undefined>;\r\n  /**\r\n   * Called when the radio button is clicked.\r\n   */\r\n  onValueChange?: (active: string) => void;\r\n};"
  },
  "Progress": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<number | undefined>",
        "description": "The value for the progress.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "max",
        "type": "MaybeGetter<number | undefined>",
        "description": "The maximum value of the progress.",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: number) => void) | undefined",
        "description": "The callback invoked when the value of the progress changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "max",
        "type": "number",
        "description": ""
      },
      {
        "name": "value",
        "type": "number",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  \"data-melt-progress-root\": string\n  value: number\n  max: number\n  role: string\n  \"aria-valuemin\": number\n  \"aria-valuemax\": number\n  \"aria-valuenow\": number\n  \"data-value\": number\n  \"data-state\": string\n  \"data-max\": number\n}",
        "description": "Spread attributes for the Progress root element."
      },
      {
        "name": "progress",
        "type": "{\n  \"data-melt-progress-progress\": string\n  style: `--progress: ${string}`\n}",
        "description": "Spread attributes for the Progress percentage element.\rProvides a --progress CSS variable that can be used to style the progress:\r`transform: translateX(calc(var(--progress) * -1));`"
      }
    ],
    "propsAlt": "export type ProgressProps = {\r\n  /**\r\n   * The value for the progress.\r\n   * \r\n   * @default undefined\r\n   */\r\n  value?: MaybeGetter<number | undefined>;\r\n\r\n  /**\r\n   * The maximum value of the progress.\r\n   * \r\n   * @deafult 100\r\n   */\r\n  max?: MaybeGetter<number | undefined>;\r\n\r\n  /**\r\n   * The callback invoked when the value of the progress changes.\r\n   */\r\n  onValueChange?: (value: number) => void;\r\n};"
  },
  "Popover": {
    "constructorProps": [
      {
        "name": "open",
        "type": "MaybeGetter<boolean> | undefined",
        "description": "If the Popover is open.\r\n\r\nWhen passing a getter, it will be used as source of truth,\r\nmeaning that the value only changes when the getter returns a new value.\r\n\r\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "forceVisible",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the popover visibility should be controlled by the user.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "computePositionOptions",
        "type": "Elements; }) => Promisable<Platform | undefined; }> | undefined>",
        "description": "Options to be passed to Floating UI's `computePosition`",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "forceVisible",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "computePositionOptions",
        "type": "{} | Partial<{ placement?: Elements; }) => Promisable<Platform | undefined; }>",
        "description": ""
      },
      {
        "name": "open",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly \"data-melt-popover-trigger\": \"\"\n  readonly id: string\n  readonly popovertarget: string\n  readonly onclick: (e: Event) => void\n}",
        "description": "The trigger that toggles the value."
      },
      {
        "name": "content",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly \"data-melt-popover-content\": \"\"\n  readonly id: string\n  readonly popover: \"manual\"\n  readonly ontoggle: (\n    e: ToggleEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly tabindex: -1\n  readonly inert: boolean\n  readonly \"data-open\": \"\" | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type PopoverProps = {\r\n  /**\r\n   * If the Popover is open.\r\n   *\r\n   * When passing a getter, it will be used as source of truth,\r\n   * meaning that the value only changes when the getter returns a new value.\r\n   *\r\n   * Otherwise, if passing a static value, it'll serve as the default value.\r\n   *\r\n   *\r\n   * @default false\r\n   */\r\n  open?: MaybeGetter<boolean>;\r\n\r\n  /**\r\n   * Called when the value is supposed to change.\r\n   */\r\n  onOpenChange?: (value: boolean) => void;\r\n\r\n  /**\r\n   * If the popover visibility should be controlled by the user.\r\n   *\r\n   * @default false\r\n   */\r\n  forceVisible?: MaybeGetter<boolean | undefined>;\r\n\r\n  /**\r\n   * Options to be passed to Floating UI's `computePosition`\r\n   *\r\n   * @see https://floating-ui.com/docs/computePosition\r\n   */\r\n  computePositionOptions?: MaybeGetter<Partial<ComputePositionConfig> | undefined>;\r\n};"
  },
  "PinInput": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<string | undefined>",
        "description": "The value for the Pin Input.\r\n\r\nWhen passing a getter, it will be used as source of truth,\r\nmeaning that the value only changes when the getter returns a new value.\r\n\r\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: string) => void) | undefined",
        "description": "Called when the `PinInput` instance tries to change the value.",
        "optional": true
      },
      {
        "name": "onComplete",
        "type": "((value: string) => void) | undefined",
        "description": "Calledwhen the `PinInput` instance is filled.",
        "optional": true
      },
      {
        "name": "onPaste",
        "type": "((value: string) => string) | undefined",
        "description": "Called before the pasted value is processed by the `PinInput` instance to allow for custom processing.",
        "optional": true
      },
      {
        "name": "onError",
        "type": "((error: Error) => void) | undefined",
        "description": "Called when the component encounters an error.",
        "optional": true
      },
      {
        "name": "maxLength",
        "type": "MaybeGetter<number | undefined>",
        "description": "The amount of digits in the Pin Input.",
        "defaultValue": "4",
        "optional": true
      },
      {
        "name": "placeholder",
        "type": "MaybeGetter<string | undefined>",
        "description": "An optional placeholder to display when the input is empty.",
        "defaultValue": "'○'",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the input.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "mask",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the input should be masked like a password.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "type",
        "type": "MaybeGetter<\"alphanumeric\" | \"numeric\" | \"text\" | undefined>",
        "description": "What characters the input accepts.",
        "defaultValue": "'text'",
        "optional": true
      },
      {
        "name": "allowPaste",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, allows pasting values from the clipboard.",
        "defaultValue": "true",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "maxLength",
        "type": "number",
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "mask",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "type",
        "type": "\"alphanumeric\" | \"numeric\" | \"text\"",
        "description": ""
      },
      {
        "name": "allowPaste",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "isFilled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-melt-pin-input-root\": \"\"\n  readonly id: string\n  readonly \"data-complete\": \"\" | undefined\n}",
        "description": "The root element's props."
      },
      {
        "name": "inputs",
        "type": "{\n  readonly \"data-melt-pin-input-input\": \"\"\n  readonly placeholder: string | undefined\n  readonly disabled: true | undefined\n  readonly type: \"text\" | \"password\"\n  readonly \"data-filled\": \"\" | undefined\n  readonly tabindex: 0 | -1\n  readonly inputmode: \"numeric\" | \"text\"\n  readonly style: \"caret-color: transparent;\" | undefined\n  readonly onkeydown: (e: KeyboardEvent) => void\n  readonly onpointerdown: (e: Event) => void\n  readonly onpointerup: (e: Event) => void\n  readonly oninput: (e: Event) => void\n  readonly onfocus: () => void\n  readonly onblur: () => void\n  readonly onpaste: (\n    e: ClipboardEvent & { currentTarget: EventTarget & HTMLInputElement },\n  ) => void\n}[]",
        "description": "An array of props that should be spread to the input elements."
      }
    ],
    "propsAlt": "export type PinInputProps = {\n  /**\n   * The value for the Pin Input.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default ''\n   */\n  value?: MaybeGetter<string | undefined>;\n  /**\n   * Called when the `PinInput` instance tries to change the value.\n   */\n  onValueChange?: (value: string) => void;\n\n  /**\n   * Calledwhen the `PinInput` instance is filled.\n   */\n  onComplete?: (value: string) => void;\n\n  /**\n   * Called before the pasted value is processed by the `PinInput` instance to allow for custom processing.\n   *\n   * @param value The pasted value.\n   * @returns The processed value.\n   */\n  onPaste?: (value: string) => string;\n\n  /**\n   * Called when the component encounters an error.\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * The amount of digits in the Pin Input.\n   *\n   * @default 4\n   */\n  maxLength?: MaybeGetter<number | undefined>;\n  /**\n   * An optional placeholder to display when the input is empty.\n   *\n   * @default '○'\n   */\n  placeholder?: MaybeGetter<string | undefined>;\n\n  /**\n   * If `true`, prevents the user from interacting with the input.\n   *\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * If the input should be masked like a password.\n   *\n   * @default false\n   */\n  mask?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * What characters the input accepts.\n   *\n   * @default 'text'\n   */\n  type?: MaybeGetter<\"alphanumeric\" | \"numeric\" | \"text\" | undefined>;\n\n  /**\n   * If `true`, allows pasting values from the clipboard.\n   *\n   * @default true\n   */\n  allowPaste?: MaybeGetter<boolean | undefined>;\n};"
  },
  "Collapsible": {
    "constructorProps": [
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "Whether the collapsible is disabled which prevents it from being opened.",
        "optional": true
      },
      {
        "name": "open",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "Whether the collapsible is open.",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "A callback called when the value of `open` changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "open",
        "type": "boolean",
        "description": "The open state of the collapsible."
      },
      {
        "name": "root",
        "type": "{\n  \"data-state\": string\n  \"data-disabled\": \"\" | undefined\n  \"data-melt-collapsible-root\": string\n}",
        "description": "The spread attributes for the root element."
      },
      {
        "name": "trigger",
        "type": "{\n  disabled: boolean\n  onclick: () => void\n  \"data-state\": string\n  \"data-disabled\": \"\" | undefined\n  \"data-melt-collapsible-trigger\": string\n}",
        "description": "The spread attributes for the trigger button."
      },
      {
        "name": "content",
        "type": "{\n  \"data-state\": string\n  \"data-disabled\": \"\" | undefined\n  \"data-melt-collapsible-content\": string\n}",
        "description": "The spread attributes for the content element."
      }
    ],
    "propsAlt": "export type CollapsibleProps = {\r\n  /**\r\n   * Whether the collapsible is disabled which prevents it from being opened.\r\n   */\r\n  disabled?: MaybeGetter<boolean | undefined>;\r\n\r\n  /**\r\n   * Whether the collapsible is open.\r\n   */\r\n  open?: MaybeGetter<boolean | undefined>;\r\n\r\n  /**\r\n   * A callback called when the value of `open` changes.\r\n   */\r\n  onOpenChange?: (value: boolean) => void;\r\n};"
  },
  "Avatar": {
    "constructorProps": [
      {
        "name": "src",
        "type": "MaybeGetter<string | undefined>",
        "description": "The source of the image to display.",
        "optional": true
      },
      {
        "name": "delayMs",
        "type": "MaybeGetter<number | undefined>",
        "description": "The amount of time in milliseconds to wait before displaying the image.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "onLoadingStatusChange",
        "type": "((value: ImageLoadingStatus) => void | undefined) | undefined",
        "description": "A callback invoked when the loading status store of the avatar changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "src",
        "type": "string",
        "description": ""
      },
      {
        "name": "delayMs",
        "type": "number",
        "description": ""
      },
      {
        "name": "loadingStatus",
        "type": "ImageLoadingStatus",
        "description": ""
      },
      {
        "name": "image",
        "type": "{\n  readonly \"data-melt-avatar-image\": \"\"\n  readonly src: string\n  readonly style: `display: ${string}`\n  readonly onload: () => (() => void) | undefined\n  readonly onerror: () => void\n}",
        "description": ""
      },
      {
        "name": "fallback",
        "type": "{\n  readonly \"data-melt-avatar-fallback\": \"\"\n  readonly style: `display: ${string}` | undefined\n  readonly hidden: true | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type AvatarProps = {\r\n  /**\r\n   * The source of the image to display.\r\n   */\r\n  src?: MaybeGetter<string | undefined>;\r\n\r\n  /**\r\n   * The amount of time in milliseconds to wait before displaying the image.\r\n   *\r\n   * @default 0\r\n   */\r\n  delayMs?: MaybeGetter<number | undefined>;\r\n\r\n  /**\r\n   * A callback invoked when the loading status store of the avatar changes.\r\n   */\r\n  onLoadingStatusChange?: (value: ImageLoadingStatus) => void | undefined;\r\n};"
  },
  "Accordion": {
    "constructorProps": [
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, multiple accordion items can be open at the same time.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "When `true`, prevents the user from interacting with the accordion.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeMultiple<Multiple> | undefined",
        "description": "The controlled value for the accordion.",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "OnChange<Multiple> | undefined",
        "description": "The callback invoked when the value of the Accordion changes.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getItem",
        "type": "<Meta extends Record<string, unknown>>(\n  item: AccordionItem<Meta>,\n) => Item<Meta, Multiple>",
        "description": "Returns an Item class with the necessary\rspread attributes for an accordion item.\r@param item"
      },
      {
        "name": "isExpanded",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently expanded.\r@param id - ID of the item to check."
      },
      {
        "name": "expand",
        "type": "(id: string) => void",
        "description": "Expands a specific item.\r@param id - ID of the item to expand."
      },
      {
        "name": "collapse",
        "type": "(id: string) => void",
        "description": "Collapses a specific item.\r@param id - ID of the item to collapse."
      },
      {
        "name": "toggleExpanded",
        "type": "(id: string) => void",
        "description": "Toggles the expanded state of an item.\r@param id - ID of the item to toggle."
      }
    ],
    "properties": [
      {
        "name": "multiple",
        "type": "Multiple extends null | undefined\n  ? Multiple | undefined\n  : Multiple | Exclude<Multiple, null | undefined>",
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "Value<FalseIfUndefined<Multiple>>",
        "description": ""
      },
      {
        "name": "root",
        "type": "{ \"data-melt-accordion-root\": string; id: string }",
        "description": "Spread attributes for the accordion root element."
      }
    ],
    "propsAlt": "export type AccordionProps<Multiple extends boolean = false> = {\r\n  /**\r\n   * If `true`, multiple accordion items can be open at the same time.\r\n   *\r\n   * @default false\r\n   */\r\n  multiple?: MaybeGetter<Multiple | undefined>;\r\n\r\n  /**\r\n   * When `true`, prevents the user from interacting with the accordion.\r\n   *\r\n   * @default false\r\n   */\r\n  disabled?: MaybeGetter<boolean | undefined>;\r\n\r\n  /**\r\n   * The controlled value for the accordion.\r\n   */\r\n  value?: AccordionValue<Multiple>;\r\n\r\n  /**\r\n   * The callback invoked when the value of the Accordion changes.\r\n   */\r\n  onValueChange?: OnChange<Multiple>;\r\n};"
  }
}